<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
         ToolsVersion="15.0" DefaultTargets="Pack">
  <ItemGroup>
    <ProjectItem Include="Source\PresentationTheme.Aero\PresentationTheme.Aero.csproj"/>
    <ProjectItem Include="Source\PresentationTheme.Aero.Win8\PresentationTheme.Aero.Win8.csproj"/>
    <ProjectItem Include="Source\PresentationTheme.Aero.Win10\PresentationTheme.Aero.Win10.csproj"/>
    <ProjectItem Include="Source\PresentationTheme.AeroLite.Win8\PresentationTheme.AeroLite.Win8.csproj"/>
    <ProjectItem Include="Source\PresentationTheme.AeroLite.Win10\PresentationTheme.AeroLite.Win10.csproj"/>
    <ProjectItem Include="Source\PresentationTheme.HighContrast.Win8\PresentationTheme.HighContrast.Win8.csproj"/>
    <ProjectItem Include="Source\PresentationTheme.HighContrast.Win10\PresentationTheme.HighContrast.Win10.csproj"/>
    <ProjectItem Include="Source\ThemeBrowser\ThemeBrowser.csproj"/>
    <ProjectItem Include="Source\ThemePreviewer\ThemePreviewer.csproj"/>
    <NativeProjectItem Include="Source\UxThemeEx\UxThemeEx.vcxproj"/>
  </ItemGroup>
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <PackageDir>$(MSBuildThisFileDirectory)dist\</PackageDir>
    <ToolsOutputPath>$(MSBuildThisFileDirectory)build\any\bin\</ToolsOutputPath>
    <BuildQuality Condition="'$(BuildQuality)' == ''">PerBuildPreRelease</BuildQuality>

    <BuildNumber Condition="'$(BuildNumber)' == ''">$(BUILD_BUILDNUMBER)</BuildNumber>
    <BuildNumber Condition="'$(BuildNumber)' == '' AND '$(OfficialBuild)' != 'true'">$([System.DateTime]::UtcNow.ToString(`yyyyMMdd.HHmm`))</BuildNumber>

    <BuildProperties>Configuration=$(Configuration);Platform=AnyCPU;BuildNumber=$(BuildNumber)</BuildProperties>
    <NativeBuildProperties>Configuration=$(Configuration);Platform=x64;BuildNumber=$(BuildNumber)</NativeBuildProperties>
    <PackProperties>$(BuildProperties);IncludeSource=true</PackProperties>

    <GitHubPagesDir>Docs\_site\</GitHubPagesDir>
  </PropertyGroup>

  <Import Project="Source\Build\Settings.props"/>
  <Import Project="$(MSBuildThisFileDirectory)Tools\MSBuildTasks.1.5.0.235\MSBuild.Community.Tasks.Targets"/>

  <UsingTask TaskName="ConcatFiles" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true"/>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true"/>
      <Separator ParameterType="System.Boolean" Required="false"/>
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
      <![CDATA[
        try {
          var sepString = new string('-', 80);
          var trimChars = new char[] { ' ', '\r', '\n', '\t' };
          const string LF = "\n";
          const string CRLF = "\r\n";

          string outputFile = Path.GetFullPath(OutputFilename);
          Directory.CreateDirectory(Path.GetDirectoryName(outputFile));

          using (var output = new FileStream(outputFile, FileMode.Create, FileAccess.Write))
          using (var writer = new StreamWriter(output)) {
              int idx = 0;
              foreach (ITaskItem fileItem in Files) {
                  if (idx++ != 0 && Separator) {
                      writer.Write(LF);
                      writer.Write(sepString);
                      writer.Write(LF);
                      writer.Write(LF);
                  }
                  string text = File.ReadAllText(fileItem.ItemSpec);
                  writer.Write(text.Trim(trimChars).Replace(CRLF, LF));
                  writer.Write(LF);
              }
          }
          return true;
        } catch (Exception ex) {
          Log.LogErrorFromException(ex);
          return false;
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="Clean">
    <MSBuild Projects="@(ProjectItem)"
             Properties="$(BuildProperties)"
             Targets="Clean"
             BuildInParallel="true"
             StopOnFirstFailure="true"/>
    <RemoveDir Directories="build\any" ContinueOnError="WarnAndContinue"/>
    <RemoveDir Directories="build\any"/>
  </Target>

  <Target Name="Restore">
    <MSBuild Projects="@(ProjectItem)"
             Properties="$(BuildProperties)"
             Targets="Restore"
             BuildInParallel="true"
             StopOnFirstFailure="true"/>
    <Exec Command="nuget restore -PackagesDirectory &quot;$(MSBuildThisFileDirectory)Source\packages&quot; &quot;@(NativeProjectItem)&quot;"/>
  </Target>

  <Target Name="Build" DependsOnTargets="Restore">
    <MSBuild Projects="@(ProjectItem)"
             Properties="$(BuildProperties)"
             BuildInParallel="true"
             StopOnFirstFailure="true"/>
    <MSBuild Projects="@(NativeProjectItem)"
             Properties="$(NativeBuildProperties)"
             BuildInParallel="true"
             StopOnFirstFailure="true"/>
  </Target>

  <Target Name="Pack" DependsOnTargets="Build">
    <PropertyGroup>
      <PackArgs>-Symbols -NoPackageAnalysis -OutputDirectory "$(PackageDir)\"</PackArgs>
      <PackArgs Condition="'$(BuildQuality)' == 'Release'">$(PackArgs) -Version "$(NuGetReleaseVersion)"</PackArgs>
      <PackArgs Condition="'$(BuildQuality)' == 'PreRelease'">$(PackArgs) -Version "$(NuGetPreReleaseVersion)"</PackArgs>
      <PackArgs Condition="'$(BuildQuality)' == 'PerBuildPreRelease'">$(PackArgs) -Version "$(NuGetPerBuildPreReleaseVersion)"</PackArgs>
    </PropertyGroup>
    <MakeDir Directories="$(PackageDir)"/>
    <Exec Command="nuget.exe pack $(PackArgs) Source\PresentationTheme.Aero.nuspec"/>
  </Target>

  <Target Name="BuildDocs">
    <Exec Command="docfx.exe Docs/docfx.json -f"/>
  </Target>

  <Target Name="UpdateDocs" DependsOnTargets="BuildDocs">
    <Exec WorkingDirectory="$(GitHubPagesDir)" Command="git add ."/>
    <Exec WorkingDirectory="$(GitHubPagesDir)" Command="git commit -m &quot;Update gh-pages&quot;"/>
  </Target>

  <Target Name="PrepareToolsLicense">
    <ItemGroup>
      <LicenseFile Include="LICENSE.txt"/>
      <LicenseFile Include="ThirdParty\EasyHook\LICENSE.txt"/>
    </ItemGroup>
    <ConcatFiles OutputFilename="$(ToolsOutputPath)LICENSE.txt" Files="@(LicenseFile)" Separator="true"/>
  </Target>

  <Target Name="PackTools" DependsOnTargets="PrepareToolsLicense">
    <ItemGroup>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.Aero.dll"/>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.Aero.Win8.dll"/>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.Aero.Win10.dll"/>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.AeroLite.Win8.dll"/>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.AeroLite.Win10.dll"/>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.HighContrast.Win8.dll"/>
      <ToolItem Include="$(ToolsOutputPath)PresentationTheme.HighContrast.Win10.dll"/>
      <ToolItem Include="$(ToolsOutputPath)System.Windows.Interactivity.dll"/>
      <ToolItem Include="$(ToolsOutputPath)ThemeBrowser.exe"/>
      <ToolItem Include="$(ToolsOutputPath)ThemeBrowser.exe.config"/>
      <ToolItem Include="$(ToolsOutputPath)ThemeCore.dll"/>
      <ToolItem Include="$(ToolsOutputPath)ThemePreviewer.exe"/>
      <ToolItem Include="$(ToolsOutputPath)ThemePreviewer.exe.config"/>
      <ToolItem Include="$(ToolsOutputPath)EasyHook64.dll"/>
      <ToolItem Include="$(ToolsOutputPath)UxThemeEx.dll"/>
      <ToolItem Include="$(ToolsOutputPath)LICENSE.txt"/>
    </ItemGroup>
    <Error Condition="!Exists(@(ToolItem))" Text="Missing file: %(ToolItem.Identity)"/>
    <Zip ZipFileName="$(PackageDir)ThemeTools-$(Version).zip"
         WorkingDirectory="$(ToolsOutputPath)"
         Files="@(ToolItem)"/>
  </Target>

  <Target Name="Publish" DependsOnTargets="Build;GetVersion">
    <PropertyGroup>
      <PushArgs>&quot;dist/PresentationTheme.Aero.$(NuGetReleaseVersion).nupkg&quot;</PushArgs>
      <PushArgs>$(PushArgs) -Source https://www.nuget.org/api/v2/package</PushArgs>
    </PropertyGroup>
    <Exec Command="nuget push $(PushArgs)"/>
  </Target>
</Project>
